define(
    [
        'Amasty_Checkout/js/model/resource-url-manager',
        'Amasty_Checkout/js/model/delivery',
        'Magento_Checkout/js/model/quote',
        'mage/storage',
        'Magento_Checkout/js/model/error-processor',
        'Magento_Checkout/js/model/shipping-service',
        'Magento_Checkout/js/model/shipping-rate-registry',
        'Magento_Checkout/js/model/resource-url-manager',
        'Magento_Checkout/js/model/cart/cache'
    ],
    function (resourceUrlManager, deliveryService, quote, storage, errorProcessor, shippingService, rateRegistry, resourceUrlManager2,cartCache) {
        "use strict";
        return function (payload) {
            if (deliveryService.isLoading()) {
                return;
            }

            // deliveryService.isLoading(true);
            var serviceUrl = resourceUrlManager.getUrlForDelivery(quote);

            storage.post(
                serviceUrl, JSON.stringify(payload), false
            ).done(
                function (result) {

                }
            ).fail(
                function (response) {
                    errorProcessor.process(response);
                }
            ).always(
                function () {
                    deliveryService.isLoading(false);
                    var address = quote.shippingAddress();
                    shippingService.isLoading(true);
                    storage.post(
                        resourceUrlManager2.getUrlForEstimationShippingMethodsByAddressId(),
                        JSON.stringify({
                            addressId: address.customerAddressId
                        }),
                        false
                    ).done(function (result) {
                        rateRegistry.set(address.getKey(), result);
                        shippingService.setShippingRates(result);
                    }).fail(function (response) {
                        shippingService.setShippingRates([]);
                        errorProcessor.process(response);
                    }).always(function () {
                            shippingService.isLoading(false);
                            shippingService.getShippingRates().subscribe(function (rates) {
				    cartCache.set('rates', rates);
				});
                        }
                    );

                }
            );
        }
    }
);
