<?php

namespace Magenest\StripePayment\Model;

use Magenest\StripePayment\Exception\StripePaymentException;
use Magento\Framework\Exception\LocalizedException;
use Stripe;

class Sofort extends AbstractPayment
{
    const CODE = 'magenest_stripe_sofort';
    protected $_code = self::CODE;

    protected $_isGateway = true;
    protected $_canAuthorize = true;
    protected $_canCapture = true;
    protected $_canCapturePartial = false;
    protected $_canCaptureOnce = true;
    protected $_canVoid = true;
    protected $_canUseInternal = false;
    protected $_canUseCheckout = true;
    protected $_canRefund = true;
    protected $_canRefundInvoicePartial = true;
    protected $_isInitializeNeeded = true;

    /**
     * @param string $paymentAction
     * @param object $stateObject
     * @return Sofort
     * @throws LocalizedException
     * @throws StripePaymentException
     */
    public function initialize($paymentAction, $stateObject)
    {
        try {
            $this->stripeHelper->initStripeApi();
            $payment = $this->getInfoInstance();
            $order = $payment->getOrder();
            $sourceId = $payment->getAdditionalInformation("stripe_source_id");
            $amount = $order->getBaseGrandTotal();
            $chargeRequest = $this->stripeHelper->createChargeRequest($order, $amount, $sourceId);
            $charge = Stripe\Charge::create($chargeRequest);
            $this->_debug($charge->getLastResponse()->json);
            $chargeId = $charge->id;
            $payment->setAdditionalInformation("stripe_charge_id", $chargeId);
            $chargeStatus = $charge->status;
            $totalDue = $order->getTotalDue();
            $baseTotalDue = $order->getBaseTotalDue();
            $stateObject->setData('state', \Magento\Sales\Model\Order::STATE_PROCESSING);
            if ($chargeStatus == 'pending') {
                $payment->setTransactionId($chargeId);
                $payment->setAmountAuthorized($totalDue);
                $payment->authorize(true, $baseTotalDue);
                $order->setCanSendNewEmailFlag(false);
            }
            if ($chargeStatus == 'succeeded') {
                $transactionId = $charge->balance_transaction;
                $payment->setTransactionId($transactionId)
                    ->setLastTransId($transactionId);
                $payment->setAmountAuthorized($totalDue);
                $payment->setBaseAmountAuthorized($baseTotalDue);
                $payment->capture(null);
            }
            if ($chargeStatus == 'failed') {
                throw new StripePaymentException(
                    __("Payment failed")
                );
            }
            return parent::initialize($paymentAction, $stateObject); // TODO: Change the autogenerated stub
        } catch (\Stripe\Exception\ApiErrorException $e) {
            throw new LocalizedException(__($e->getMessage()));
        }
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @param float $amount
     * @return Sofort
     * @throws LocalizedException
     */
    public function authorize(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        $payment->setIsTransactionClosed(0);
        return parent::authorize($payment, $amount);
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface|\Magento\Sales\Model\Order\Payment $payment
     * @param float $amount
     * @throws \Magento\Framework\Exception\LocalizedException
     */
    public function capture(\Magento\Payment\Model\InfoInterface $payment, $amount)
    {
        return $this->checkCapture($payment, $amount);
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @return Sofort
     * @throws LocalizedException
     * @throws StripePaymentException
     * @throws Stripe\Exception\ApiErrorException
     */
    public function void(\Magento\Payment\Model\InfoInterface $payment)
    {
        $order = $payment->getOrder();
        $amount = $order->getBaseGrandTotal();
        $this->refund($payment, $amount);
        $payment->setShouldCloseParentTransaction(1);
        return parent::void($payment);
    }

    /**
     * @param \Magento\Payment\Model\InfoInterface $payment
     * @return Sofort
     * @throws LocalizedException
     * @throws StripePaymentException
     * @throws Stripe\Exception\ApiErrorException
     */
    public function cancel(\Magento\Payment\Model\InfoInterface $payment)
    {
        if ($this->_appState->getAreaCode() == 'adminhtml') {
            $this->void($payment);
        }
        return parent::cancel($payment);
    }

    /**
     * @return string[]
     */
    protected function getAcceptedCurrencyCodes()
    {
        return ['eur'];
    }
}
